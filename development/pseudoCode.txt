for each todo, check if todo.deadline is today
    place them in todoTodayArray
else   
    place them in todoLaterArray

if todoTodayArray is bigger than todoLaterArray
    place the rest in the second row
else

//first do the left column arrays
topAmount = leftColumnArray.length/2, do math.round

for topAmount of times,
    block1Array.push(shift entry from leftColumnArray)
    leftColumnArrayRestEntries = leftColumnArray

    block3Array = leftColumnArrayRestEntries

//then do the right column arrays

for every index value, remove that value from the arrays


first get each of the index values in a row

make function disableActionButtonsExcept()

make function changeUIState


states:
- empty
create todo > creating todo

- creating todo
no buttons available
(createTodo) empty with confirmation message
(closeTodo) empty

-todo Selected
finish todo > -empty
edit todo > -edit todo
remove todo > -empty

--make buttons for moving todo's up and down
--add dates to known dates
--make dates red when they passed


---------------------------------------------
renderLogic
UI state management
todoOverviewOrdering.js

display.js functions:



UIStates:
 > 
/createInfoNode > renderLogic

remove trigger states

give the action buttons as a parameter.
change the function into: disable/enable htmlElements

-empty display.js
-fix move todo place function to work in the eisenhower matrix


todo: 
maak een class van renderLogic


what is the problem:
when I change the order of priority of a todo in the eisenhower matrix, 
it needs to adjust to the next todo in matrix, not in the total list (todoArray)

but afterwards it needs to be placed to that new spot in the todoArray

so I need to send the array made up of the block of the eisenhower matrix forward
and make all functions receive that array, or supplant it with todoArray if no array was given
then in the last function, which moves the todo in the array, I need to get the orginal array,
and splice move the todo to the new index

    -send an array of that eisenhower matrix block
    - make a new function: getTodoArrayDependingOnUIState

todoController.moveTodoInUrgency
    -continue sending the array

\/
movement.moveTodoInUrgency
    -if no array was given, make the array the todoArray
\/
getNextTodo
    get the next todo of the given array (check with and without eisenhower array,
                                          make sure that they give different todo's)

todoStorage.SpliceTodoToNewIndex
    give the current todo, and the placementIndexTodo,
    get the index of the the placementIndexTodo
    change this in the todoArray itself (directly)

\/

- make a frontEndUtil variable: currentTodoOverviewState
- make a function: getTodoOrderDependingOnTodoOverviewState
- connect the function to the todoController
- make the array that is returned sent onto movement.moveTodoInUrgency
- adjust getNextTodo to get the next todo in the given array
- make sure that spliceTodoToNewIndex receives the 2 todo Objects:
    movingTodo, todoAtMoveLocation
- make sure that the splice happens in the todoArray itself

problem: the todo is changed in position in the original todoArray, but is not changed
in the returned array

too seems to not change in the visual matrix

functions for a state class:
    applyClass 
        change currentTodoOverviewState to class name
        change display to overview state

there are 2 class contructors to be made:
- todoOverviewState

- userActionState


class UIStates
    contructor(name){
        this.name = name
        this.applyState = applyState
    }

    static userActionStateArray

storeState = this.push(state)

applystate:
change buttons (createTodo)
update todoDisplayContent (todoCreationMenu
eventlisteners.createEventListeners)


- empty
create todo > creating todo

- creating todo
no buttons available
(createTodo) empty with confirmation message
(closeTodo) empty

-todo Selected
finish todo > -empty
edit todo > -edit todo
remove todo > -empty


